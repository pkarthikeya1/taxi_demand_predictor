@startuml
!include https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Container.puml

!theme cerulean

' ---------------------------------------------------------------------------
' OVERRIDE SKINPARAMS FOR A VIBRANT & CLEAN LOOK
' ---------------------------------------------------------------------------
skinparam Rectangle {
    BackgroundColor<<Data>> #E8F0FE
    BorderColor<<Data>> #4285F4
    FontColor<<Data>> #1A73E8
}
skinparam Rectangle {
    BackgroundColor<<Processing>> #FFF7E6
    BorderColor<<Processing>> #FBBC05
    FontColor<<Processing>> #E37400
}
skinparam Rectangle {
    BackgroundColor<<Storage>> #E6F4EA
    BorderColor<<Storage>> #34A853
    FontColor<<Storage>> #0F9D58
}
skinparam Rectangle {
    BackgroundColor<<Interface>> #FCE8E6
    BorderColor<<Interface>> #EA4335
    FontColor<<Interface>> #D93025
}

' ---------------------------------------------------------------------------
' SET A VERTICAL (Top-Down) LAYOUT
' ---------------------------------------------------------------------------
LAYOUT_TOP_DOWN()
Title "Taxi Demand Predictor - Vibrant C4 Container Diagram (Vertical Layout)"

' ---------------------------------------------------------------------------
' PEOPLE & EXTERNAL SYSTEMS
' ---------------------------------------------------------------------------
Person(user, "End User", "Views predictions & performance metrics")
System_Ext(nycApi, "NYC Taxi API", "Provides raw taxi trip data (batch/stream)")

' ---------------------------------------------------------------------------
' SYSTEM BOUNDARY
' ---------------------------------------------------------------------------
System_Boundary(systemBoundary, "Taxi Demand Predictor") {
  Container(dataIngestion, "Data Ingestion", "Python/ETL", "Ingests raw data from NYC Taxi API and writes to Raw Storage") 
  Container(featurePipeline, "Feature Pipeline", "Python/Feature Engineering", "Validates and transforms raw data into feature store") 
  Container(featureStore, "Feature Store", "Hopsworks / Database", "Stores and serves feature data for model training & inference") 

  Container(modelTraining, "Model Training", "LightGBM / Python", "Trains ML models and publishes them to Model Registry") 
  Container(modelRegistry, "Model Registry", "Artifact Store", "Versioned storage for trained models and metadata") 

  Container(inferenceService, "Inference Service", "Python / Flask", "Loads latest model & features to generate predictions") 
  Container(predictionStorage, "Prediction Storage", "Database", "Stores inference results and logs for monitoring") 

  Container(monitoringService, "Monitoring & Alerts", "Prometheus/Grafana", "Collects performance metrics & triggers alerts") 
  Container(frontend, "Streamlit Dashboard", "Streamlit", "Displays predictions, metrics, and system status") 
}

' ---------------------------------------------------------------------------
' RELATIONSHIPS
' ---------------------------------------------------------------------------
Rel(nycApi, dataIngestion, "Sends raw taxi trip data")
Rel(dataIngestion, featurePipeline, "Passes validated data")
Rel(featurePipeline, featureStore, "Writes processed features", "Time-series encoded")
Rel(featureStore, modelTraining, "Provides training features")
Rel(modelTraining, modelRegistry, "Publishes trained models")
Rel(modelRegistry, inferenceService, "Pulls latest model for inference")
Rel(featureStore, inferenceService, "Loads latest feature vectors")
Rel(inferenceService, predictionStorage, "Stores predictions & logs")
Rel(predictionStorage, monitoringService, "Sends logs/metrics")
Rel(inferenceService, monitoringService, "Sends model performance metrics")
Rel(monitoringService, frontend, "Displays performance & triggers alerts")
Rel(frontend, user, "Views predictions & metrics")
Rel(monitoringService, user, "Sends notifications/alerts (email/Slack)")

@enduml
